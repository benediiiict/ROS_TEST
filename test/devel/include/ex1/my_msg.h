// Generated by gencpp from file ex1/my_msg.msg
// DO NOT EDIT!


#ifndef EX1_MESSAGE_MY_MSG_H
#define EX1_MESSAGE_MY_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ex1
{
template <class ContainerAllocator>
struct my_msg_
{
  typedef my_msg_<ContainerAllocator> Type;

  my_msg_()
    : x(0.0)
    , y(0.0)
    , add(0.0)
    , dec(0.0)
    , mul(0.0)
    , div(0.0)  {
    }
  my_msg_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , add(0.0)
    , dec(0.0)
    , mul(0.0)
    , div(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _add_type;
  _add_type add;

   typedef float _dec_type;
  _dec_type dec;

   typedef float _mul_type;
  _mul_type mul;

   typedef float _div_type;
  _div_type div;





  typedef boost::shared_ptr< ::ex1::my_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ex1::my_msg_<ContainerAllocator> const> ConstPtr;

}; // struct my_msg_

typedef ::ex1::my_msg_<std::allocator<void> > my_msg;

typedef boost::shared_ptr< ::ex1::my_msg > my_msgPtr;
typedef boost::shared_ptr< ::ex1::my_msg const> my_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ex1::my_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ex1::my_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ex1::my_msg_<ContainerAllocator1> & lhs, const ::ex1::my_msg_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.add == rhs.add &&
    lhs.dec == rhs.dec &&
    lhs.mul == rhs.mul &&
    lhs.div == rhs.div;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ex1::my_msg_<ContainerAllocator1> & lhs, const ::ex1::my_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ex1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ex1::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ex1::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ex1::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ex1::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex1::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ex1::my_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ex1::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44ff2c22d9a554d1e2d1b68f3b671b07";
  }

  static const char* value(const ::ex1::my_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44ff2c22d9a554d1ULL;
  static const uint64_t static_value2 = 0xe2d1b68f3b671b07ULL;
};

template<class ContainerAllocator>
struct DataType< ::ex1::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ex1/my_msg";
  }

  static const char* value(const ::ex1::my_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ex1::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 add\n"
"float32 dec\n"
"float32 mul\n"
"float32 div\n"
;
  }

  static const char* value(const ::ex1::my_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ex1::my_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.add);
      stream.next(m.dec);
      stream.next(m.mul);
      stream.next(m.div);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ex1::my_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ex1::my_msg_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "add: ";
    Printer<float>::stream(s, indent + "  ", v.add);
    s << indent << "dec: ";
    Printer<float>::stream(s, indent + "  ", v.dec);
    s << indent << "mul: ";
    Printer<float>::stream(s, indent + "  ", v.mul);
    s << indent << "div: ";
    Printer<float>::stream(s, indent + "  ", v.div);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EX1_MESSAGE_MY_MSG_H
